#ifndef EXEMPLE_H
#define EXEMPLE_H

#include <Eigen\Eigen>

static const int size = 5;
static const double gamma = 0.9;
static const int m1size = size*size;
static const int min = 0;
static const int max = m1size - 1;
static const int wallsReward = -1;
static const int treasureReward = 100;
static const char m1data[] = { '0', 'w', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*2*/	   '-', 'w', '0', '-', '-', '-', 'w', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 
					/*3*/	   '-', 'w', '0', '0', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*4*/	   '-', '-', '0', '0', '0', '-', '-', '-', 'w', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*5*/	   '-', '-', '-', '0', '0', '-', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*6*/	   '0', '-', '-', '-', '-', '0', 'w', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*7*/	   '-', 'w', '-', '-', '-', '0', 'w', '0', '-', '-', '-', 'w', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*8*/	   '-', '-', '0', '-', '-', '-', 'w', '0', 'w', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*9*/	   '-', '-', '-', '0', '-', '-', '-', '0', 'w', '0', '-', '-', '-', 'w', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*10*/	   '-', '-', '-', '-', '0', '-', '-', '-', 'w', '0', '-', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*11*/	   '-', '-', '-', '-', '-', '0', '-', '-', '-', '-', '0', 'w', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-', '-', '-',
					/*12*/	   '-', '-', '-', '-', '-', '-', 'w', '-', '-', '-', '0', 'w', '0', '-', '-', '-', 'w', '-', '-', '-', '-', '-', '-', '-', '-',
					/*13*/	   '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', 'w', '0', 'w', '-', '-', '-', '0', '-', '-', '-', '-', '-', '-', '-',
					/*14*/	   '-', '-', '-', '-', '-', '-', '-', '-', 'w', '-', '-', '-', '0', 'w', '0', '-', '-', '-', 'w', '-', '-', '-', '-', '-', '-',
					/*15*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', 'w', '0', '-', '-', '-', '-', '0', '-', '-', '-', '-', '-',
					/*16*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', '-', '0', 'w', '-', '-', '-', '0', '-', '-', '-', '-',
					/*17*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'w', '-', '-', '-', '0', 'w', '0', '-', '-', '-', '0', '-', '-', '-',
					/*18*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', 'w', '0', 'w', '-', '-', '-', '0', '-', '-',
					/*19*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'w', '-', '-', '-', '0', 'w', '0', '-', '-', '-', 'w', '-',
					/*20*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', 'w', '0', '-', '-', '-', '-', 'T',
					/*21*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', '-', '0', '0', '-', '-', '-',
					/*22*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'w', '-', '-', '-', '0', '0', '0', '-', '-',
					/*23*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', '0', '0', 'w', '-',
					/*24*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'w', '-', '-', '-', '0', 'w', 'T',
					/*25*/	   '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '0', '-', '-', '-', 'w', '0' };

Eigen::Matrix<char, m1size, m1size, Eigen::RowMajor> m1(m1data);


bool reachable(int i, int j);
int randomAction(int state);
int rewardCharToInt(int state, int action);
std::pair<double, int> maxOfRow(Eigen::Matrix<double, m1size, m1size> M, int state);
#endif